# Smart Animation

```elixir
Mix.install([
  {:smart_animation, path: "."},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Installation

Add `SmartAnimation` to your setup section in your Livebook.

<!-- livebook:{"force_markdown":true} -->

```elixir
Mix.install([
  {:smart_animation, path: "brooklinjazz/smart_animation"},
])
```

## Usage

Example: infinitely increments the current frame starting a `1`.

```elixir
SmartAnimation.new(fn frame ->
  Kino.Markdown.new("This is animation frame #{frame}")
end)
```

`SmartAnimation` can accept a range and function.

```elixir
SmartAnimation.new(0..10, fn index ->
  Kino.Markdown.new("This is animation frame #{index}")
end)
```

`SmartAnimation` calculates the number of frames and displays the current count `1/7` even when the frames are `2..8`.

```elixir
SmartAnimation.new(2..8, fn x ->
  Kino.Markdown.new("This is animation frame #{x}")
end)
```

`SmartAnimation` can also accept a list of values to render.

```elixir
SmartAnimation.new(Enum.map(1..10, fn frame -> Kino.Markdown.new("### Heading #{frame}") end))
```

## Speed Multiplier

You can alter the `:speed_multiplier` by providing it in a list of options. `10` is the maximum and `0.5` is the minumum. Provide a float or integer divisible by `0.5`.

The speed multiplier automatically increments by `0.5` evertime you click it, so you'll want an initial speed multiplier divisible by `0.5` to avoid odd behavior.

```elixir
SmartAnimation.new(1..10, fn i -> i end, speed_multiplier: 0.5)
```

## Hidden Cell

Use the [Hidden Cell](https://github.com/BrooklinJazz/hidden_cell) project if you want to hide the code powering the animation.

<!-- livebook:{"attrs":{"source":"SmartAnimation.new(fn x ->\n  Kino.Markdown.new(\"This is animation frame #{x}\")\nend)","title":"Hidden Animation"},"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
SmartAnimation.new(fn x ->
  Kino.Markdown.new("This is animation frame #{x}")
end)
```
